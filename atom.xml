<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title> - Articles</title>
    <description>Software architeture, service mesh, microservices, and more...</description>
    <link>
    https://venilnoronha.io</link>
    
      
      <item>
        <title>Introduction to Original Destination in Envoy</title>
        
          <description>&lt;p&gt;&lt;a href=&quot;https://envoyproxy.io&quot;&gt;Envoy&lt;/a&gt; is a service mesh proxy with a ton of built-in
capabilities. In this post, I’ll be discussing the Original Destination feature
in Envoy.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 26 Jun 2021 19:15:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/introduction-to-original-destination-in-envoy</link>
        <guid isPermaLink="true">https://venilnoronha.io/introduction-to-original-destination-in-envoy</guid>
      </item>
      
    
      
      <item>
        <title>A Beginner's Guide to AuthN and AuthZ with Istio</title>
        
          <description>&lt;p&gt;Service meshes solve some of the key challenges in the cloud-native world today, and in this post
I’ll be discussing about security.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 02 Mar 2021 00:04:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/a-beginners-guide-to-authn-and-authz-with-istio</link>
        <guid isPermaLink="true">https://venilnoronha.io/a-beginners-guide-to-authn-and-authz-with-istio</guid>
      </item>
      
    
      
      <item>
        <title>A Simple State Machine Framework in Go</title>
        
          <description>&lt;p&gt;The concept of &lt;a href=&quot;https://en.wikipedia.org/wiki/Finite-state_machine&quot;&gt;State Machines&lt;/a&gt; is not new, and
they form the core of a lot of systems that we come across daily, for example, elevators and traffic
lights. State machines make it a lot easy to understand and implement multi-faceted systems where
inputs can be asynchronous and are triggered by multiple sources.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 24 May 2020 23:51:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/a-simple-state-machine-framework-in-go</link>
        <guid isPermaLink="true">https://venilnoronha.io/a-simple-state-machine-framework-in-go</guid>
      </item>
      
    
      
      <item>
        <title>How to Write Envoy Filters Like a Ninja!</title>
        
          <description>&lt;p&gt;&lt;a href=&quot;https://envoyproxy.io&quot;&gt;Envoy&lt;/a&gt; is a programmable L3/L4 and L7 proxy that powers
today’s service mesh solutions including &lt;a href=&quot;https://istio.io&quot;&gt;Istio&lt;/a&gt;, &lt;a href=&quot;https://aws.amazon.com/app-mesh/&quot;&gt;AWS App
Mesh&lt;/a&gt;, &lt;a href=&quot;https://www.consul.io/docs/connect/index.html&quot;&gt;Consul Connect&lt;/a&gt;,
etc. At Envoy’s core lie several filters that provide a rich set of features for
observing, securing, and routing network traffic to microservices.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 28 May 2019 10:40:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/how-to-write-envoy-filters-like-a-ninja</link>
        <guid isPermaLink="true">https://venilnoronha.io/how-to-write-envoy-filters-like-a-ninja</guid>
      </item>
      
    
      
      <item>
        <title>Hand-crafting a Sidecar Proxy and Demystifying Istio</title>
        
          <description>&lt;p&gt;The sidecar proxy pattern is an important concept that lets &lt;a href=&quot;https://istio.io/&quot;&gt;Istio&lt;/a&gt;
provide routing, metrics, security, and other features to services running in
a &lt;a href=&quot;https://en.wikipedia.org/wiki/Microservices#Service_Mesh&quot;&gt;service mesh&lt;/a&gt;. In
this post I’ll explain key techniques that power Istio and I’ll also show you a
way to build a simple HTTP traffic-sniffing sidecar proxy.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 10 Mar 2019 19:37:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/hand-crafting-a-sidecar-proxy-and-demystifying-istio</link>
        <guid isPermaLink="true">https://venilnoronha.io/hand-crafting-a-sidecar-proxy-and-demystifying-istio</guid>
      </item>
      
    
      
      <item>
        <title>Seamless Cloud-Native Apps with gRPC-Web and Istio</title>
        
          <description>&lt;p&gt;&lt;a href=&quot;https://github.com/grpc/grpc-web&quot;&gt;gRPC-Web&lt;/a&gt; enables web applications to access
&lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt; backends via a proxy like &lt;a href=&quot;https://www.envoyproxy.io/&quot;&gt;Envoy&lt;/a&gt;.
Envoy serves as the default proxy for &lt;a href=&quot;https://istio.io/&quot;&gt;Istio&lt;/a&gt;, and, so, we
can leverage Istio’s &lt;a href=&quot;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#EnvoyFilter&quot;&gt;EnvoyFilter&lt;/a&gt;
construct to create seamless, well connected, Cloud-Native web applications.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 10 Nov 2018 15:48:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/seamless-cloud-native-apps-with-grpc-web-and-istio</link>
        <guid isPermaLink="true">https://venilnoronha.io/seamless-cloud-native-apps-with-grpc-web-and-istio</guid>
      </item>
      
    
      
      <item>
        <title>Envoy, gRPC, and Rate Limiting</title>
        
          <description>&lt;p&gt;&lt;a href=&quot;https://www.envoyproxy.io/&quot;&gt;Envoy&lt;/a&gt; is a lightweight service proxy designed for
Cloud Native applications. It’s also one of the few proxies that support &lt;a href=&quot;https://grpc.io/&quot;&gt;gRPC&lt;/a&gt;,
which is based on the H2 (&lt;a href=&quot;https://en.wikipedia.org/wiki/HTTP/2&quot;&gt;HTTP/2&lt;/a&gt;)
protocol. gRPC is a high performance RPC (&lt;a href=&quot;https://en.wikipedia.org/wiki/Remote_procedure_call&quot;&gt;Remote Procedure Call&lt;/a&gt;)
framework and it supports a plethora of environments.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 27 Oct 2018 03:25:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/envoy-grpc-and-rate-limiting</link>
        <guid isPermaLink="true">https://venilnoronha.io/envoy-grpc-and-rate-limiting</guid>
      </item>
      
    
      
      <item>
        <title>Raw TCP Traffic Shaping with Istio 1.1.0</title>
        
          <description>&lt;p&gt;&lt;a href=&quot;https://istio.io/&quot;&gt;Istio&lt;/a&gt; provides sophisticated routing mechanics via concepts
like &lt;a href=&quot;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#VirtualService&quot;&gt;VirtualService&lt;/a&gt;,
&lt;a href=&quot;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#DestinationRule&quot;&gt;DestinationRule&lt;/a&gt;,
&lt;a href=&quot;https://istio.io/docs/reference/config/istio.networking.v1alpha3/#Gateway&quot;&gt;Gateway&lt;/a&gt;,
etc. Istio 1.0 enabled HTTP traffic shifting via &lt;a href=&quot;https://istio.io/docs/tasks/traffic-management/traffic-shifting/#apply-weight-based-routing&quot;&gt;weighted route definitions&lt;/a&gt;.
I was able to contribute a similar feature for TCP/TLS services via my PRs
&lt;a href=&quot;https://github.com/envoyproxy/envoy/pull/4430&quot;&gt;on Envoy&lt;/a&gt; and &lt;a href=&quot;https://github.com/istio/istio/pull/9112&quot;&gt;on Istio&lt;/a&gt;.
The feature in Envoy was released in &lt;a href=&quot;https://www.envoyproxy.io/docs/envoy/latest/intro/version_history#oct-4-2018&quot;&gt;1.8.0&lt;/a&gt;
and the one in Istio will be available in the upcoming &lt;a href=&quot;https://github.com/istio/istio/releases/&quot;&gt;1.1.0&lt;/a&gt;
release.&lt;/p&gt;

</description>
        
        <pubDate>Fri, 19 Oct 2018 13:00:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/raw-tcp-traffic-shaping-with-istio-1.1.0</link>
        <guid isPermaLink="true">https://venilnoronha.io/raw-tcp-traffic-shaping-with-istio-1.1.0</guid>
      </item>
      
    
      
      <item>
        <title>Set sail a production-ready Istio Adapter</title>
        
          <description>&lt;p&gt;So, you’ve walked through the Istio Mixer Adapter &lt;a href=&quot;https://github.com/istio/istio/wiki/Mixer-Out-Of-Process-Adapter-Dev-Guide&quot;&gt;guide&lt;/a&gt; and want to now publish your own &lt;strong&gt;amazing&lt;/strong&gt; adapter? This post will run you through the process of setting sail your own adapter on the seas of production.&lt;/p&gt;

</description>
        
        <pubDate>Sun, 07 Oct 2018 11:49:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/set-sail-a-production-ready-istio-adapter</link>
        <guid isPermaLink="true">https://venilnoronha.io/set-sail-a-production-ready-istio-adapter</guid>
      </item>
      
    
      
      <item>
        <title>A step by step guide to mTLS in Go</title>
        
          <description>&lt;p&gt;Ever wondered what mTLS (mutual TLS) looks like? Come, learn to implement mTLS
using Golang and OpenSSL.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 04 Sep 2018 20:51:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/a-step-by-step-guide-to-mtls-in-go</link>
        <guid isPermaLink="true">https://venilnoronha.io/a-step-by-step-guide-to-mtls-in-go</guid>
      </item>
      
    
      
      <item>
        <title>Designing Asynchronous Functions with Go</title>
        
          <description>&lt;p&gt;Who doesn’t love fully controllable asynchronous APIs? This post is about crafting asynchronous functions using Golang’s &lt;a href=&quot;https://godoc.org/context&quot;&gt;Context&lt;/a&gt;, &lt;a href=&quot;https://gobyexample.com/channels&quot;&gt;Channels&lt;/a&gt;, and &lt;a href=&quot;https://gobyexample.com/goroutines&quot;&gt;Goroutines&lt;/a&gt;.&lt;/p&gt;

</description>
        
        <pubDate>Mon, 02 Apr 2018 20:34:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/designing-asynchronous-functions-with-go</link>
        <guid isPermaLink="true">https://venilnoronha.io/designing-asynchronous-functions-with-go</guid>
      </item>
      
    
      
      <item>
        <title>How we built a simple Game Lobby Manager using Go and Unity</title>
        
          <description>&lt;p&gt;Lobby managers are one of the most critical components of today’s online gaming infrastructure. In this post, I elaborate my experience of building a simple lobby manager using Golang and Unity.&lt;/p&gt;

</description>
        
        <pubDate>Tue, 28 Nov 2017 16:51:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/how-we-built-a-simple-game-lobby-manager-using-go-and-unity</link>
        <guid isPermaLink="true">https://venilnoronha.io/how-we-built-a-simple-game-lobby-manager-using-go-and-unity</guid>
      </item>
      
    
      
      <item>
        <title>Kick start your own Spring Cloud Config Server with MongoDB</title>
        
          <description>&lt;p&gt;Spring Cloud Config Server MongoDB enables the seamless integration of the regular Spring Cloud Config Server with MongoDB to manage external properties for applications across all environments.&lt;/p&gt;

</description>
        
        <pubDate>Sat, 04 Nov 2017 10:38:00 +0000</pubDate>
        <link>
        https://venilnoronha.io/kick-start-your-own-spring-cloud-config-server-with-mongodb</link>
        <guid isPermaLink="true">https://venilnoronha.io/kick-start-your-own-spring-cloud-config-server-with-mongodb</guid>
      </item>
      
    
  </channel>
</rss>
